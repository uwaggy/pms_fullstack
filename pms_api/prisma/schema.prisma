generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // The application admin
  USER  // This is a compuser

  @@map("roles")
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED

  @@map("verification_status")
}

enum PasswordResetStatus {
  PENDING
  IDLE

  @@map("password_reset_status")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("request_status")
}

enum VehicleStatus {
  PENDING
  APPROVED

  @@map("vehicle_status")
}

model User {
  id                   String              @id @default(uuid())
  firstName            String              @map("first_name")
  lastName             String              @map("last_name")
  email                String              @unique
  password             String
  profilePicture       String              @default("https://firebasestorage.googleapis.com/v0/b/relaxia-services.appspot.com/o/relaxia-profiles%2Fblank-profile-picture-973460_960_720.webp?alt=media") @map("profile_picture")
  role                 Role                @default(USER)
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  vehicles             Vehicle[]
  parkingRequests      ParkingRequest[]

  @@map("users")
}

model Vehicle {
  id            String    @id @default(uuid())
  plateNumber   String    @unique @map("plate_number")
  parkingCode   String    @map("parking_code")
  entryDateTime DateTime  @map("entry_date_time")
  exitDateTime  DateTime? @map("exit_date_time")
  chargedAmount Float     @default(0) @map("charged_amount")
  duration      Int?      @map("duration") // Duration in minutes
  ticketNumber  String?   @unique @map("ticket_number")
  billNumber    String?   @unique @map("bill_number")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @map("user_id")

  @@index([userId])
  @@map("vehicles")
}

model ParkingSlot {
  id              String           @id @default(uuid())
  code            String           @unique
  name            String
  location        String
  totalSpaces     Int              @map("total_spaces")
  availableSpaces Int              @map("available_spaces")
  chargingFee     Float            @default(0) @map("charging_fee")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  parkingRequests ParkingRequest[]

  @@map("parking_slots")
}

model ParkingRequest {
  id            String      @id @default(uuid())
  plateNumber   String
  parkingSlot   ParkingSlot @relation(fields: [parkingSlotId], references: [id])
  parkingSlotId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id")
  checkIn       DateTime    @default(now())
  checkOut      DateTime?
  chargedAmount Float       @default(0)
  status        String      @default("PENDING")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([parkingSlotId])
  @@index([userId])
  
  @@map("parking_requests") 
}
